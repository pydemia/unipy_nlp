# -*- coding: utf-8 -*-
"""
Created on Tue May 14 15:41:19 2019
Modified on Tue May 14 15:41:19 2019

@author: Youngju Jaden Kim
"""


import os
import sys
import site
import datetime as dt
import tarfile
import distutils
import subprocess
from glob import glob
from pathlib import Path

try:
    from setuptools import setup, find_packages
    from setuptools.command.install import install
except ImportError:
    from distutils.core import setup, find_packages
    from setuptools.command.install import install
from distutils.cmd import Command



# Package Description

package_name = 'unipy_nlp'
package_version = '0.0.1'
short_desc = 'NLP Tools for Data Scientist.'
package_source = '{name}-{version}.tar.gz'.format(
    name=package_name,
    version=package_version,
)
license_family_str = 'MIT'
license_str = 'MIT License'
modified_time = dt.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
resource_dir = os.path.join(
    os.path.abspath(os.path.dirname(__file__)),
    package_name,
    '_resources',
)

git_url = 'https://github.com/pydemia/{package_name}'.format(
    package_name=package_name
)
doc_url = 'https://{package_name}.readthedocs.io/en/latest/index.html'.format(
    package_name=package_name
)


with open('README.rst', 'r', encoding='utf-8') as readme_file:
    long_desc = readme_file.read()


version_py_strfmt = '''#-*- coding: utf-8 -*-
# This file is automatically generated by 'setup.py'
"""
Created on Tue May 14 15:41:19 2019
Modified on {modified_time}

@author: Youngju Jaden Kim
"""


__all__ = ['__version__']


__version__ = '{package_version}'

'''
with open('unipy_nlp/__version__.py', 'w') as f:
    version_py_str = version_py_strfmt.format(
        modified_time=modified_time,
        package_version=package_version,
    )
    f.write(version_py_str)

with open('unipy_nlp/__UNIPY_NLP_SETUP__.py', 'w') as f:
    f.write("__SETUP_OK__ = False")

def make_resource_targz(source_dir, output_filename):
    print("create %s..." % output_filename)
    with tarfile.open(output_filename, "w:gz") as tar:
        tar.add(source_dir, arcname=os.path.basename(source_dir))


def build_mecab():
    cwd = os.path.abspath(os.path.dirname(__file__))
    # p = subprocess.call(
    #     [
    #         sys.executable,
    #         os.path.jon(cwd, )
    #     ]
    # )
    mecab_dir = os.path.join(
        resource_dir,
        'mecab',
    )
    output = subprocess.call(['sh', os.path.join(mecab_dir, 'build_mecab.sh')])
    print(output)

build_mecab()


resource_tarname = '_resources.tar.gz'
make_resource_targz(
    resource_dir,
    os.path.join(
        package_name,
        resource_tarname,
    )
)


# resource_file_abspath_list = glob(
#     os.path.join(
#         resource_dir,
#         '**',
#     ),
#     recursive=True,
# )[1:]
# resource_file_relpath_list = [
#     os.path.relpath(filepath, resource_dir)
#     for filepath in resource_file_abspath_list
# ]
# resource_file_relpath_only_files_list = list(
#     filter(
#         os.path.isfile,
#         (item for item in resource_file_relpath_list),
#     )
# )

with open('REQUIREMENTS.txt', 'r') as f:
    header, *required_packages = f.readlines()

required_on_run = (
    '\n' + '\n'.join([
        (' ' * 4) + '- {dep}'.format(dep=dep)
        for dep in (['python'] + required_packages)
    ])
)
required_on_build = '\n' + (' ' * 4) + '- setuptools' + required_on_run


class SphinxCommand(Command):
    """Documentation Command"""

    def initialize_options(self):
        """Set default values for options."""
        pass

    def finalize_options(self):
        """Post-process options."""
        pass

    def run(self):
        """Run command."""
        command = ['cd docs;make html;cd ..']
        # command.append(os.getcwd())
        self.announce(
            'Running command: %s' % str(command),
            level=distutils.log.INFO)
        subprocess.check_call(command)


# class PostInstallCommand(install):
#     """Post-installation for installation mode."""

#     def run(self):
#         installed_dir = os.path.join(
#             site.getsitepackages()[0],
#             package_name,
#         )
#         working_dir = subprocess.check_output(["pwd", "-P"]).decode('utf-8').split("\n")[0]
#         subprocess.check_call(
#             ";".join(
#                 [
#                     "cd %s" % installed_dir,
#                     "tar -zxf %s" % resource_tarname,
#                     "cd %s" % working_dir,
#                 ]
#             )
#         )
#         install.run(self)

setup(
    name=package_name,
    version=package_version,
    description='Useful tools for Data Scientists',
    long_description=long_desc,
    python_requires='>= 3.6',
    url=doc_url,
    download_url=git_url,
    author='Youngju Jaden Kim',
    author_email='pydemia@gmail.com',
    license=license_str,
    classifiers=[
        # How Mature: 3 - Alpha, 4 - Beta, 5 - Production/Stable
        'Development Status :: 4 - Beta',
        'Environment :: Console',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Operating System :: OS Independent',
        'Intended Audience :: End Users/Desktop',
        'Intended Audience :: Developers',
        'Intended Audience :: Science/Research',
        'Natural Language :: English',
    ],
    packages=find_packages(
        exclude=[
            'contrib',
            #  'docs',
            'tests',
        ],
    ),
    cmdclass={
        'documentation': SphinxCommand,
        #'install': PostInstallCommand,
    },
    # setup_requires=required_packages,
    install_requires=required_packages,
    zip_safe=False,
    # package_data={package_name: ['*.gz', '_resources/resources.tar.gz']},
    package_data={package_name: ['*.gz', '_resources.tar.gz']},
    # data_files=[
    #     # (directory, files)
    #     ('_resources', resource_file_relpath_only_files_list),
    #     # ('config', ['cfg/data.cfg']),
    # ],
)
